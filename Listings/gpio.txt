; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\gpio.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\gpio.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O0 -Otime --diag_suppress=9931 -I.\Inc -I.\System_Files -I.\RTE\_NucleoF446xx -ID:\Users\Laurent\AppData\Local\Arm\Packs\ARM\CMSIS\5.6.0\CMSIS\Core\Include -ID:\Users\Laurent\AppData\Local\Arm\Packs\Keil\STM32F4xx_DFP\2.14.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -D__UVISION_VERSION=529 -D_RTE_ -DSTM32F446xx -D_DEBUG -DUSE_HAL_CAN_REGISTER_CALLBACKS --omf_browse=.\objects\gpio.crf Src\gpio.c]
                          THUMB

                          AREA ||i.GPIO_PinAF||, CODE, READONLY, ALIGN=1

                  GPIO_PinAF PROC
;;;153     */
;;;154    bool GPIO_PinAF(uint8_t PinId,
000000  b5f0              PUSH     {r4-r7,lr}
;;;155                    uint8_t AlternateFunction,
;;;156    								uint32_t AFR_Register[2]	) 
;;;157    {
000002  4603              MOV      r3,r0
000004  460c              MOV      r4,r1
;;;158      if ( PinId >= 16) return false;
000006  2b10              CMP      r3,#0x10
000008  db01              BLT      |L1.14|
00000a  2000              MOVS     r0,#0
                  |L1.12|
;;;159    	
;;;160    	PinId/=8;
;;;161    	PinId%=8;
;;;162    	AFR_Register[(PinId/8)] = (AFR_Register[1] & ~(0xF << (4*(PinId%8)))) | (AlternateFunction << (4*(PinId%8)));
;;;163    
;;;164    	
;;;165      if (PinId >= 8) {
;;;166    		PinId%=8;
;;;167        AFR_Register[1] = (AFR_Register[1] & ~(0xF << (4*PinId))) | (AlternateFunction << (4*PinId));
;;;168      } else {
;;;169        AFR_Register[0] = (AFR_Register[0] & ~(0xF << (4*PinId))) | (AlternateFunction << (4*PinId));
;;;170      }
;;;171    
;;;172      return true;
;;;173    }
00000c  bdf0              POP      {r4-r7,pc}
                  |L1.14|
00000e  4618              MOV      r0,r3                 ;160
000010  17d9              ASRS     r1,r3,#31             ;160
000012  eb037151          ADD      r1,r3,r1,LSR #29      ;160
000016  f3c103c7          UBFX     r3,r1,#3,#8           ;160
00001a  4618              MOV      r0,r3                 ;161
00001c  17d9              ASRS     r1,r3,#31             ;161
00001e  eb037151          ADD      r1,r3,r1,LSR #29      ;161
000022  10c9              ASRS     r1,r1,#3              ;161
000024  eba301c1          SUB      r1,r3,r1,LSL #3       ;161
000028  b2cb              UXTB     r3,r1                 ;161
00002a  4618              MOV      r0,r3                 ;162
00002c  17de              ASRS     r6,r3,#31             ;162
00002e  eb037656          ADD      r6,r3,r6,LSR #29      ;162
000032  10f6              ASRS     r6,r6,#3              ;162
000034  eba306c6          SUB      r6,r3,r6,LSL #3       ;162
000038  00b7              LSLS     r7,r6,#2              ;162
00003a  260f              MOVS     r6,#0xf               ;162
00003c  40be              LSLS     r6,r6,r7              ;162
00003e  6857              LDR      r7,[r2,#4]            ;162
000040  ea270606          BIC      r6,r7,r6              ;162
000044  4619              MOV      r1,r3                 ;162
000046  17df              ASRS     r7,r3,#31             ;162
000048  eb037757          ADD      r7,r3,r7,LSR #29      ;162
00004c  10ff              ASRS     r7,r7,#3              ;162
00004e  eba307c7          SUB      r7,r3,r7,LSL #3       ;162
000052  00bf              LSLS     r7,r7,#2              ;162
000054  fa04f707          LSL      r7,r4,r7              ;162
000058  433e              ORRS     r6,r6,r7              ;162
00005a  461d              MOV      r5,r3                 ;162
00005c  17df              ASRS     r7,r3,#31             ;162
00005e  eb037757          ADD      r7,r3,r7,LSR #29      ;162
000062  10ff              ASRS     r7,r7,#3              ;162
000064  f8426027          STR      r6,[r2,r7,LSL #2]     ;162
000068  2b08              CMP      r3,#8                 ;165
00006a  db11              BLT      |L1.144|
00006c  17d9              ASRS     r1,r3,#31             ;166
00006e  eb037151          ADD      r1,r3,r1,LSR #29      ;166
000072  10c9              ASRS     r1,r1,#3              ;166
000074  eba301c1          SUB      r1,r3,r1,LSL #3       ;166
000078  b2cb              UXTB     r3,r1                 ;166
00007a  009d              LSLS     r5,r3,#2              ;167
00007c  210f              MOVS     r1,#0xf               ;167
00007e  40a9              LSLS     r1,r1,r5              ;167
000080  6850              LDR      r0,[r2,#4]            ;167
000082  4388              BICS     r0,r0,r1              ;167
000084  0099              LSLS     r1,r3,#2              ;167
000086  fa04f101          LSL      r1,r4,r1              ;167
00008a  4308              ORRS     r0,r0,r1              ;167
00008c  6050              STR      r0,[r2,#4]            ;167
00008e  e009              B        |L1.164|
                  |L1.144|
000090  009d              LSLS     r5,r3,#2              ;169
000092  210f              MOVS     r1,#0xf               ;169
000094  40a9              LSLS     r1,r1,r5              ;169
000096  6810              LDR      r0,[r2,#0]            ;169
000098  4388              BICS     r0,r0,r1              ;169
00009a  0099              LSLS     r1,r3,#2              ;169
00009c  fa04f101          LSL      r1,r4,r1              ;169
0000a0  4308              ORRS     r0,r0,r1              ;169
0000a2  6010              STR      r0,[r2,#0]            ;169
                  |L1.164|
0000a4  2001              MOVS     r0,#1                 ;172
0000a6  e7b1              B        |L1.12|
                          ENDP


                          AREA ||i.GPIOx_PinAF||, CODE, READONLY, ALIGN=2

                  GPIOx_PinAF PROC
;;;55      */
;;;56     void GPIOx_PinAF (PinNameEnum      PinId,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;57                      uint8_t    AlternateFunction) {
000004  4607              MOV      r7,r0
000006  460c              MOV      r4,r1
;;;58     
;;;59     	GPIO_TypeDef* GPIOx;
;;;60     												 
;;;61     	int PinNum=GET_PIN_INDEX(PinId);
000008  f007050f          AND      r5,r7,#0xf
;;;62     		 
;;;63     	if( IS_GPIO_AF(AlternateFunction)!=true)
00000c  2c00              CMP      r4,#0
00000e  d04f              BEQ      |L2.176|
000010  2c09              CMP      r4,#9
000012  d04d              BEQ      |L2.176|
000014  2c00              CMP      r4,#0
000016  d04b              BEQ      |L2.176|
000018  d04a              BEQ      |L2.176|
00001a  d049              BEQ      |L2.176|
00001c  d048              BEQ      |L2.176|
00001e  2c01              CMP      r4,#1
000020  d046              BEQ      |L2.176|
000022  d045              BEQ      |L2.176|
000024  2c02              CMP      r4,#2
000026  d043              BEQ      |L2.176|
000028  d042              BEQ      |L2.176|
00002a  d041              BEQ      |L2.176|
00002c  2c03              CMP      r4,#3
00002e  d03f              BEQ      |L2.176|
000030  2c04              CMP      r4,#4
000032  d03d              BEQ      |L2.176|
000034  d03c              BEQ      |L2.176|
000036  d03b              BEQ      |L2.176|
000038  2c05              CMP      r4,#5
00003a  d039              BEQ      |L2.176|
00003c  d038              BEQ      |L2.176|
00003e  2c09              CMP      r4,#9
000040  d036              BEQ      |L2.176|
000042  2c06              CMP      r4,#6
000044  d034              BEQ      |L2.176|
000046  2c09              CMP      r4,#9
000048  d032              BEQ      |L2.176|
00004a  2c07              CMP      r4,#7
00004c  d030              BEQ      |L2.176|
00004e  d02f              BEQ      |L2.176|
000050  d02e              BEQ      |L2.176|
000052  2c08              CMP      r4,#8
000054  d02c              BEQ      |L2.176|
000056  d02b              BEQ      |L2.176|
000058  d02a              BEQ      |L2.176|
00005a  2c09              CMP      r4,#9
00005c  d028              BEQ      |L2.176|
00005e  d027              BEQ      |L2.176|
000060  2c0a              CMP      r4,#0xa
000062  d025              BEQ      |L2.176|
000064  d024              BEQ      |L2.176|
000066  2c0b              CMP      r4,#0xb
000068  d022              BEQ      |L2.176|
00006a  2c0c              CMP      r4,#0xc
00006c  d020              BEQ      |L2.176|
00006e  d01f              BEQ      |L2.176|
000070  2c0d              CMP      r4,#0xd
000072  d01d              BEQ      |L2.176|
000074  2c0f              CMP      r4,#0xf
000076  d01b              BEQ      |L2.176|
000078  2c05              CMP      r4,#5
00007a  d019              BEQ      |L2.176|
00007c  2c0c              CMP      r4,#0xc
00007e  d017              BEQ      |L2.176|
000080  2c06              CMP      r4,#6
000082  d015              BEQ      |L2.176|
000084  2c03              CMP      r4,#3
000086  d013              BEQ      |L2.176|
000088  2c04              CMP      r4,#4
00008a  d011              BEQ      |L2.176|
00008c  2c05              CMP      r4,#5
00008e  d00f              BEQ      |L2.176|
000090  2c06              CMP      r4,#6
000092  d00d              BEQ      |L2.176|
000094  d00c              BEQ      |L2.176|
000096  2c07              CMP      r4,#7
000098  d00a              BEQ      |L2.176|
00009a  d009              BEQ      |L2.176|
00009c  d008              BEQ      |L2.176|
00009e  d007              BEQ      |L2.176|
0000a0  2c08              CMP      r4,#8
0000a2  d005              BEQ      |L2.176|
0000a4  d004              BEQ      |L2.176|
0000a6  2c09              CMP      r4,#9
0000a8  d002              BEQ      |L2.176|
0000aa  2c0a              CMP      r4,#0xa
0000ac  d000              BEQ      |L2.176|
0000ae  d101              BNE      |L2.180|
                  |L2.176|
0000b0  2001              MOVS     r0,#1
0000b2  e000              B        |L2.182|
                  |L2.180|
0000b4  2000              MOVS     r0,#0
                  |L2.182|
0000b6  2801              CMP      r0,#1
0000b8  d003              BEQ      |L2.194|
;;;64     		assert_failed(__FILE__,__LINE__);
0000ba  2140              MOVS     r1,#0x40
0000bc  a013              ADR      r0,|L2.268|
0000be  f7fffffe          BL       assert_failed
                  |L2.194|
;;;65     												 
;;;66     	GPIOx=(GPIO_TypeDef*)(GPIOA_BASE+(GET_PORT_INDEX(PinId)*0x0400U));
0000c2  f3c71003          UBFX     r0,r7,#4,#4
0000c6  4914              LDR      r1,|L2.280|
0000c8  eb012680          ADD      r6,r1,r0,LSL #10
;;;67     
;;;68       if (PinNum >= 8) {
0000cc  2d08              CMP      r5,#8
0000ce  db11              BLT      |L2.244|
;;;69     		PinNum%=8;
0000d0  4628              MOV      r0,r5
0000d2  17e9              ASRS     r1,r5,#31
0000d4  eb057151          ADD      r1,r5,r1,LSR #29
0000d8  10c9              ASRS     r1,r1,#3
0000da  eba505c1          SUB      r5,r5,r1,LSL #3
;;;70         GPIOx->AFR[1] = (GPIOx->AFR[1] & ~(0xF << (4*PinNum))) | (AlternateFunction << (4*PinNum));
0000de  6a70              LDR      r0,[r6,#0x24]
0000e0  00aa              LSLS     r2,r5,#2
0000e2  210f              MOVS     r1,#0xf
0000e4  4091              LSLS     r1,r1,r2
0000e6  4388              BICS     r0,r0,r1
0000e8  00a9              LSLS     r1,r5,#2
0000ea  fa04f101          LSL      r1,r4,r1
0000ee  4308              ORRS     r0,r0,r1
0000f0  6270              STR      r0,[r6,#0x24]
0000f2  e009              B        |L2.264|
                  |L2.244|
;;;71       } else {
;;;72         GPIOx->AFR[0] = (GPIOx->AFR[0] & ~(0xF << (4*PinNum))) | (AlternateFunction << (4*PinNum));
0000f4  6a30              LDR      r0,[r6,#0x20]
0000f6  00aa              LSLS     r2,r5,#2
0000f8  210f              MOVS     r1,#0xf
0000fa  4091              LSLS     r1,r1,r2
0000fc  4388              BICS     r0,r0,r1
0000fe  00a9              LSLS     r1,r5,#2
000100  fa04f101          LSL      r1,r4,r1
000104  4308              ORRS     r0,r0,r1
000106  6230              STR      r0,[r6,#0x20]
                  |L2.264|
;;;73       }
;;;74     }
000108  e8bd81f0          POP      {r4-r8,pc}
;;;75     
                          ENDP

                  |L2.268|
00010c  5372635c          DCB      "Src\\gpio.c",0
000110  6770696f
000114  2e6300  
000117  00                DCB      0
                  |L2.280|
                          DCD      0x40020000

                          AREA ||i.GPIOx_Pin_Configure||, CODE, READONLY, ALIGN=2

                  GPIOx_Pin_Configure PROC
;;;24      */
;;;25     void GPIOx_Pin_Configure(PinNameEnum      PinId,  // I.E. : PC_5
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;26                            GpioPinFunctionEnum  moder,	// GPIO Mode: Input(00, reset), Output(01), AlterFunc(10), Analog(11, reset)
;;;27     																											
;;;28                            GpioOutputTypeEnum   output_type,		// GPIO Output Type: Output push-pull (0, reset), Output open drain (1)
;;;29     																											
;;;30                            GpioOutputSpeedEnum  output_speed,		// GPIO Speed: Low speed (00), Medium speed (01), Fast speed (10), High speed (11)
;;;31                            GpioPullUpDownEnum  pull_up_down) 	// GPIO Push-Pull: No pull-up, pull-down (00), Pull-up (01), Pull-down (10), Reserved (11)
;;;32     {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  9f07              LDR      r7,[sp,#0x1c]
;;;33     	GPIO_TypeDef* GPIOx;
;;;34     												 
;;;35     	int PinNum=GET_PIN_INDEX(PinId);
00000c  f004010f          AND      r1,r4,#0xf
;;;36     	int PortNum=GET_PORT_INDEX(PinId);
000010  f3c41203          UBFX     r2,r4,#4,#4
;;;37     
;;;38     // Enable GPIO clock
;;;39     	RCC->AHB1ENR |= (0x1U << PortNum);
000014  f8dfc0ac          LDR      r12,|L3.196|
000018  f8dcc000          LDR      r12,[r12,#0]
00001c  f04f0801          MOV      r8,#1
000020  fa08f802          LSL      r8,r8,r2
000024  ea4c0c08          ORR      r12,r12,r8
000028  f8df8098          LDR      r8,|L3.196|
00002c  f8c8c000          STR      r12,[r8,#0]
;;;40     	
;;;41     	GPIOx=(GPIO_TypeDef*)(GPIOA_BASE+(PortNum*0x0400U)); // uint16_t = unsigned int
000030  f8dfc094          LDR      r12,|L3.200|
000034  eb0c2082          ADD      r0,r12,r2,LSL #10
;;;42     
;;;43       GPIOx->MODER   = (GPIOx->MODER   & ~(0x3 << (2*PinNum))) | (moder         << (2*PinNum));
000038  f8d0c000          LDR      r12,[r0,#0]
00003c  ea4f0941          LSL      r9,r1,#1
000040  f04f0803          MOV      r8,#3
000044  fa08f809          LSL      r8,r8,r9
000048  ea2c0c08          BIC      r12,r12,r8
00004c  ea4f0841          LSL      r8,r1,#1
000050  fa05f808          LSL      r8,r5,r8
000054  ea4c0c08          ORR      r12,r12,r8
000058  f8c0c000          STR      r12,[r0,#0]
;;;44       GPIOx->OTYPER  = (GPIOx->OTYPER  & ~(0x1 <<    PinNum))  | (output_type  <<    PinNum);
00005c  f8d0c004          LDR      r12,[r0,#4]
000060  f04f0801          MOV      r8,#1
000064  fa08f801          LSL      r8,r8,r1
000068  ea2c0c08          BIC      r12,r12,r8
00006c  fa06f801          LSL      r8,r6,r1
000070  ea4c0c08          ORR      r12,r12,r8
000074  f8c0c004          STR      r12,[r0,#4]
;;;45       GPIOx->OSPEEDR = (GPIOx->OSPEEDR & ~(0x3 << (2*PinNum))) | (output_speed << (2*PinNum));
000078  f8d0c008          LDR      r12,[r0,#8]
00007c  ea4f0941          LSL      r9,r1,#1
000080  f04f0803          MOV      r8,#3
000084  fa08f809          LSL      r8,r8,r9
000088  ea2c0c08          BIC      r12,r12,r8
00008c  ea4f0841          LSL      r8,r1,#1
000090  fa03f808          LSL      r8,r3,r8
000094  ea4c0c08          ORR      r12,r12,r8
000098  f8c0c008          STR      r12,[r0,#8]
;;;46       GPIOx->PUPDR   = (GPIOx->PUPDR   & ~(0x3 << (2*PinNum))) | (pull_up_down << (2*PinNum));
00009c  f8d0c00c          LDR      r12,[r0,#0xc]
0000a0  ea4f0941          LSL      r9,r1,#1
0000a4  f04f0803          MOV      r8,#3
0000a8  fa08f809          LSL      r8,r8,r9
0000ac  ea2c0c08          BIC      r12,r12,r8
0000b0  ea4f0841          LSL      r8,r1,#1
0000b4  fa07f808          LSL      r8,r7,r8
0000b8  ea4c0c08          ORR      r12,r12,r8
0000bc  f8c0c00c          STR      r12,[r0,#0xc]
;;;47     }
0000c0  e8bd83f0          POP      {r4-r9,pc}
;;;48     
                          ENDP

                  |L3.196|
                          DCD      0x40023830
                  |L3.200|
                          DCD      0x40020000

                          AREA ||i.GPIOx_Read_Input_Pin||, CODE, READONLY, ALIGN=2

                  GPIOx_Read_Input_Pin PROC
;;;137     */
;;;138    bool GPIOx_Read_Input_Pin(PinNameEnum PinId)
000000  b510              PUSH     {r4,lr}
;;;139    {
000002  4601              MOV      r1,r0
;;;140    	GPIO_TypeDef* GPIOx;
;;;141    	
;;;142    	GPIOx=(GPIO_TypeDef*)(GPIOA_BASE+(GET_PORT_INDEX(PinId)*0x0400U));
000004  f3c11003          UBFX     r0,r1,#4,#4
000008  4b06              LDR      r3,|L4.36|
00000a  eb032280          ADD      r2,r3,r0,LSL #10
;;;143    
;;;144      return (GPIOx->IDR & (0x01<<GET_PIN_INDEX(PinId)) );
00000e  6910              LDR      r0,[r2,#0x10]
000010  f001040f          AND      r4,r1,#0xf
000014  2301              MOVS     r3,#1
000016  40a3              LSLS     r3,r3,r4
000018  4018              ANDS     r0,r0,r3
00001a  b108              CBZ      r0,|L4.32|
00001c  2001              MOVS     r0,#1
                  |L4.30|
;;;145    }
00001e  bd10              POP      {r4,pc}
                  |L4.32|
000020  2000              MOVS     r0,#0                 ;144
000022  e7fc              B        |L4.30|
;;;146    
                          ENDP

                  |L4.36|
                          DCD      0x40020000

                          AREA ||i.GPIOx_Reset_Output_Pin||, CODE, READONLY, ALIGN=2

                  GPIOx_Reset_Output_Pin PROC
;;;96      */
;;;97     void GPIOx_Reset_Output_Pin(PinNameEnum PinId)
000000  b510              PUSH     {r4,lr}
;;;98     {
;;;99     	GPIO_TypeDef* GPIOx;
;;;100    	
;;;101    	GPIOx=(GPIO_TypeDef*)(GPIOA_BASE+(GET_PORT_INDEX(PinId)*0x0400U));
000002  f3c01203          UBFX     r2,r0,#4,#4
000006  4b05              LDR      r3,|L5.28|
000008  eb032182          ADD      r1,r3,r2,LSL #10
;;;102    
;;;103      GPIOx->ODR  = (GPIOx->ODR  & ~(0x1 << GET_PIN_INDEX(PinId)));
00000c  694a              LDR      r2,[r1,#0x14]
00000e  f000040f          AND      r4,r0,#0xf
000012  2301              MOVS     r3,#1
000014  40a3              LSLS     r3,r3,r4
000016  439a              BICS     r2,r2,r3
000018  614a              STR      r2,[r1,#0x14]
;;;104    }
00001a  bd10              POP      {r4,pc}
;;;105    
                          ENDP

                  |L5.28|
                          DCD      0x40020000

                          AREA ||i.GPIOx_Set_Output_Pin||, CODE, READONLY, ALIGN=2

                  GPIOx_Set_Output_Pin PROC
;;;81      */
;;;82     void GPIOx_Set_Output_Pin(PinNameEnum PinId)
000000  b510              PUSH     {r4,lr}
;;;83     {
;;;84     	GPIO_TypeDef* GPIOx;
;;;85     												 
;;;86     	GPIOx=(GPIO_TypeDef*)(GPIOA_BASE+(GET_PORT_INDEX(PinId)*0x0400U));
000002  f3c01203          UBFX     r2,r0,#4,#4
000006  4b05              LDR      r3,|L6.28|
000008  eb032182          ADD      r1,r3,r2,LSL #10
;;;87     	
;;;88     	GPIOx->ODR|= (0x1 << GET_PIN_INDEX(PinId));
00000c  694a              LDR      r2,[r1,#0x14]
00000e  f000040f          AND      r4,r0,#0xf
000012  2301              MOVS     r3,#1
000014  40a3              LSLS     r3,r3,r4
000016  431a              ORRS     r2,r2,r3
000018  614a              STR      r2,[r1,#0x14]
;;;89     }
00001a  bd10              POP      {r4,pc}
;;;90     
                          ENDP

                  |L6.28|
                          DCD      0x40020000

                          AREA ||i.GPIOx_Set_Output_Port||, CODE, READONLY, ALIGN=1

                  GPIOx_Set_Output_Port PROC
;;;126     */
;;;127    void GPIOx_Set_Output_Port(GPIO_TypeDef* GPIOx, uint16_t val, uint16_t mask)
000000  6943              LDR      r3,[r0,#0x14]
;;;128    {	
;;;129    	GPIOx->ODR  = (GPIOx->ODR  & ~mask)  | val;
000002  4393              BICS     r3,r3,r2
000004  430b              ORRS     r3,r3,r1
000006  6143              STR      r3,[r0,#0x14]
;;;130    }
000008  4770              BX       lr
;;;131    
                          ENDP


                          AREA ||i.GPIOx_Toggle_Output_Pin||, CODE, READONLY, ALIGN=2

                  GPIOx_Toggle_Output_Pin PROC
;;;111     */
;;;112    void GPIOx_Toggle_Output_Pin(PinNameEnum PinId)
000000  b510              PUSH     {r4,lr}
;;;113    {
;;;114    	GPIO_TypeDef* GPIOx;
;;;115    											
;;;116    	GPIOx=(GPIO_TypeDef*)(GPIOA_BASE+(GET_PORT_INDEX(PinId)*0x0400U));
000002  f3c01203          UBFX     r2,r0,#4,#4
000006  4b05              LDR      r3,|L8.28|
000008  eb032182          ADD      r1,r3,r2,LSL #10
;;;117    	
;;;118    	GPIOx->ODR^= (0x1 << GET_PIN_INDEX(PinId));
00000c  694a              LDR      r2,[r1,#0x14]
00000e  f000040f          AND      r4,r0,#0xf
000012  2301              MOVS     r3,#1
000014  40a3              LSLS     r3,r3,r4
000016  405a              EORS     r2,r2,r3
000018  614a              STR      r2,[r1,#0x14]
;;;119    }
00001a  bd10              POP      {r4,pc}
;;;120    
                          ENDP

                  |L8.28|
                          DCD      0x40020000

;*** Start embedded assembler ***

#line 1 "Src\\gpio.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_gpio_c_303a327a____REV16|
#line 492 "D:\\Users\\Laurent\\AppData\\Local\\Arm\\Packs\\ARM\\CMSIS\\5.6.0\\CMSIS\\Core\\Include\\cmsis_armcc.h"
|__asm___6_gpio_c_303a327a____REV16| PROC
#line 493

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_gpio_c_303a327a____REVSH|
#line 507
|__asm___6_gpio_c_303a327a____REVSH| PROC
#line 508

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___6_gpio_c_303a327a____RRX|
#line 694
|__asm___6_gpio_c_303a327a____RRX| PROC
#line 695

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
