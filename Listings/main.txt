; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\main.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\main.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O0 -Otime --diag_suppress=9931 -I.\Inc -I.\System_Files -I.\RTE\_NucleoF446xx -ID:\Users\Laurent\AppData\Local\Arm\Packs\ARM\CMSIS\5.6.0\CMSIS\Core\Include -ID:\Users\Laurent\AppData\Local\Arm\Packs\Keil\STM32F4xx_DFP\2.14.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -D__UVISION_VERSION=529 -D_RTE_ -DSTM32F446xx -D_DEBUG -DUSE_HAL_CAN_REGISTER_CALLBACKS --omf_browse=.\objects\main.crf Src\main.c]
                          THUMB

                          AREA ||i.CAN1_RX0_IRQHandler||, CODE, READONLY, ALIGN=2

                  CAN1_RX0_IRQHandler PROC
;;;72     */
;;;73     void CANx_RX_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;74     {
;;;75       HAL_CAN_IRQHandler(&CanHandle);
000002  4802              LDR      r0,|L1.12|
000004  f7fffffe          BL       HAL_CAN_IRQHandler
;;;76     }
000008  bd10              POP      {r4,pc}
;;;77     
                          ENDP

00000a  0000              DCW      0x0000
                  |L1.12|
                          DCD      CanHandle

                          AREA ||i.CAN_Config||, CODE, READONLY, ALIGN=2

                  CAN_Config PROC
;;;215      */
;;;216    static void CAN_Config(void)
000000  b500              PUSH     {lr}
;;;217    {
000002  b08b              SUB      sp,sp,#0x2c
;;;218      CAN_FilterTypeDef  sFilterConfig;
;;;219    	
;;;220    		// GPIO Config
;;;221    	// PB8 CAN1_RX
;;;222    	// PB9 CAN1 TX
;;;223    	GPIOx_Pin_Configure(PB_8, PIN_ALTERNATE, OUTPUT_PUSHPULL, OUTPUT_SPEED_HS, INPUT_PULL_UP);
000004  2001              MOVS     r0,#1
000006  2303              MOVS     r3,#3
000008  2200              MOVS     r2,#0
00000a  2102              MOVS     r1,#2
00000c  9000              STR      r0,[sp,#0]
00000e  2018              MOVS     r0,#0x18
000010  f7fffffe          BL       GPIOx_Pin_Configure
;;;224    	GPIOx_PinAF (PB_8, GPIO_AF9_CAN1);
000014  2109              MOVS     r1,#9
000016  2018              MOVS     r0,#0x18
000018  f7fffffe          BL       GPIOx_PinAF
;;;225    
;;;226    	GPIOx_Pin_Configure(PB_9, PIN_ALTERNATE, OUTPUT_PUSHPULL, OUTPUT_SPEED_HS, INPUT_PULL_UP);
00001c  2001              MOVS     r0,#1
00001e  2303              MOVS     r3,#3
000020  2200              MOVS     r2,#0
000022  2102              MOVS     r1,#2
000024  9000              STR      r0,[sp,#0]
000026  2019              MOVS     r0,#0x19
000028  f7fffffe          BL       GPIOx_Pin_Configure
;;;227    	GPIOx_PinAF (PB_9, GPIO_AF9_CAN1);
00002c  2109              MOVS     r1,#9
00002e  2019              MOVS     r0,#0x19
000030  f7fffffe          BL       GPIOx_PinAF
;;;228    
;;;229    	// Set up the clock	
;;;230    	RCC->APB1ENR|=RCC_APB1ENR_CAN1EN; // CAN1 clock enable
000034  4855              LDR      r0,|L2.396|
000036  6800              LDR      r0,[r0,#0]
000038  f0407000          ORR      r0,r0,#0x2000000
00003c  4953              LDR      r1,|L2.396|
00003e  6008              STR      r0,[r1,#0]
;;;231    	
;;;232    	/* CAN register init */
;;;233      //CAN_DeInit(CANx);
;;;234    	
;;;235    	
;;;236    
;;;237      /*##-1- Configure the CAN peripheral #######################################*/
;;;238      CanHandle.Instance = CANx;
000040  4853              LDR      r0,|L2.400|
000042  4954              LDR      r1,|L2.404|
000044  6008              STR      r0,[r1,#0]  ; CanHandle
;;;239    
;;;240      CanHandle.Init.TimeTriggeredMode = DISABLE;
000046  2100              MOVS     r1,#0
000048  4852              LDR      r0,|L2.404|
00004a  7601              STRB     r1,[r0,#0x18]
;;;241      CanHandle.Init.AutoBusOff = DISABLE;
00004c  7641              STRB     r1,[r0,#0x19]
;;;242      CanHandle.Init.AutoWakeUp = DISABLE;
00004e  7681              STRB     r1,[r0,#0x1a]
;;;243      CanHandle.Init.AutoRetransmission = ENABLE;
000050  2101              MOVS     r1,#1
000052  76c1              STRB     r1,[r0,#0x1b]
;;;244      CanHandle.Init.ReceiveFifoLocked = DISABLE;
000054  2100              MOVS     r1,#0
000056  7701              STRB     r1,[r0,#0x1c]
;;;245      CanHandle.Init.TransmitFifoPriority = DISABLE;
000058  7741              STRB     r1,[r0,#0x1d]
;;;246      CanHandle.Init.Mode = CAN_MODE_NORMAL;
00005a  6081              STR      r1,[r0,#8]
;;;247      CanHandle.Init.SyncJumpWidth = CAN_SJW_1TQ;
00005c  60c1              STR      r1,[r0,#0xc]
;;;248    	// LBR 
;;;249      /* CAN Baudrate = 500 KBps (CAN APB1 clocked at 45 MHz) */ // LBR
;;;250    	/*
;;;251    	Tq=(BRP[9:0]+1)*time period of APB clock = 6/45Mhz 
;;;252    	Tbs1=Tq*(TS1[3:0]+1) =Tq*(TS1[3:0]+1) = 12tq
;;;253    	Tbs2=Tq*(TS2[2:0]+1) =Tq*(TS2[2:0]+1) = 2tq
;;;254    	NominalBitTime = 1*Tq+Tbs1+Tbs2 = 15tq = 15*6/45 = 2Mhz
;;;255    	Baud Rate=1/NominalBitTime = 500 KBps
;;;256    	http://www.bittiming.can-wiki.info/
;;;257    	*/
;;;258      CanHandle.Init.TimeSeg1 = CAN_BS1_12TQ;
00005e  f44f2130          MOV      r1,#0xb0000
000062  6101              STR      r1,[r0,#0x10]
;;;259      CanHandle.Init.TimeSeg2 = CAN_BS2_2TQ;
000064  f44f1180          MOV      r1,#0x100000
000068  6141              STR      r1,[r0,#0x14]
;;;260      CanHandle.Init.Prescaler = 6;
00006a  2006              MOVS     r0,#6
00006c  4949              LDR      r1,|L2.404|
00006e  6048              STR      r0,[r1,#4]  ; CanHandle
;;;261    
;;;262      if (HAL_CAN_Init(&CanHandle) != HAL_OK)
000070  4608              MOV      r0,r1
000072  f7fffffe          BL       HAL_CAN_Init
000076  b108              CBZ      r0,|L2.124|
;;;263      {
;;;264        /* Initialization Error */
;;;265        Error_Handler();
000078  f7fffffe          BL       Error_Handler
                  |L2.124|
;;;266      }
;;;267    
;;;268      /*##-2- Configure the CAN Filter ###########################################*/
;;;269      sFilterConfig.FilterBank = 0;
00007c  2000              MOVS     r0,#0
00007e  9006              STR      r0,[sp,#0x18]
;;;270      sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
000080  9007              STR      r0,[sp,#0x1c]
;;;271      sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
000082  2001              MOVS     r0,#1
000084  9008              STR      r0,[sp,#0x20]
;;;272      sFilterConfig.FilterIdHigh = 0x0000;
000086  2000              MOVS     r0,#0
000088  9001              STR      r0,[sp,#4]
;;;273      sFilterConfig.FilterIdLow = 0x0000;
00008a  9002              STR      r0,[sp,#8]
;;;274      sFilterConfig.FilterMaskIdHigh = 0x0000;
00008c  9003              STR      r0,[sp,#0xc]
;;;275      sFilterConfig.FilterMaskIdLow = 0x0000;
00008e  9004              STR      r0,[sp,#0x10]
;;;276      sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
000090  9005              STR      r0,[sp,#0x14]
;;;277      sFilterConfig.FilterActivation = ENABLE;
000092  2001              MOVS     r0,#1
000094  9009              STR      r0,[sp,#0x24]
;;;278      sFilterConfig.SlaveStartFilterBank = 14;
000096  200e              MOVS     r0,#0xe
000098  900a              STR      r0,[sp,#0x28]
;;;279    
;;;280      if (HAL_CAN_ConfigFilter(&CanHandle, &sFilterConfig) != HAL_OK)
00009a  a901              ADD      r1,sp,#4
00009c  483d              LDR      r0,|L2.404|
00009e  f7fffffe          BL       HAL_CAN_ConfigFilter
0000a2  b108              CBZ      r0,|L2.168|
;;;281      {
;;;282        /* Filter configuration Error */
;;;283        Error_Handler();
0000a4  f7fffffe          BL       Error_Handler
                  |L2.168|
;;;284      }
;;;285    	// LBR Ready state now, configure callback fcts here
;;;286    	CAN_ConfigureCallBackFct(&CanHandle);
0000a8  483a              LDR      r0,|L2.404|
0000aa  f7fffffe          BL       CAN_ConfigureCallBackFct
;;;287    	
;;;288      /*##-3- Start the CAN peripheral ###########################################*/
;;;289      if (HAL_CAN_Start(&CanHandle) != HAL_OK)
0000ae  4839              LDR      r0,|L2.404|
0000b0  f7fffffe          BL       HAL_CAN_Start
0000b4  b108              CBZ      r0,|L2.186|
;;;290      {
;;;291        /* Start Error */
;;;292        Error_Handler();
0000b6  f7fffffe          BL       Error_Handler
                  |L2.186|
;;;293      }
;;;294    
;;;295      /*##-4- Activate CAN RX notification #######################################*/
;;;296    	// LBR only Pending IT needed
;;;297      if (HAL_CAN_ActivateNotification(&CanHandle, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
0000ba  2102              MOVS     r1,#2
0000bc  4835              LDR      r0,|L2.404|
0000be  f7fffffe          BL       HAL_CAN_ActivateNotification
0000c2  b108              CBZ      r0,|L2.200|
;;;298      {
;;;299        /* Notification Error */
;;;300        Error_Handler();
0000c4  f7fffffe          BL       Error_Handler
                  |L2.200|
;;;301      }
;;;302    
;;;303      if (HAL_CAN_ActivateNotification(&CanHandle, CAN_IT_RX_FIFO0_FULL) != HAL_OK)
0000c8  2104              MOVS     r1,#4
0000ca  4832              LDR      r0,|L2.404|
0000cc  f7fffffe          BL       HAL_CAN_ActivateNotification
0000d0  b108              CBZ      r0,|L2.214|
;;;304      {
;;;305        /* Notification Error */
;;;306        Error_Handler();
0000d2  f7fffffe          BL       Error_Handler
                  |L2.214|
;;;307      }
;;;308    
;;;309      if (HAL_CAN_ActivateNotification(&CanHandle, CAN_IT_RX_FIFO0_OVERRUN) != HAL_OK)
0000d6  2108              MOVS     r1,#8
0000d8  482e              LDR      r0,|L2.404|
0000da  f7fffffe          BL       HAL_CAN_ActivateNotification
0000de  b108              CBZ      r0,|L2.228|
;;;310      {
;;;311        /* Notification Error */
;;;312        Error_Handler();
0000e0  f7fffffe          BL       Error_Handler
                  |L2.228|
;;;313      }
;;;314    
;;;315    	  if (HAL_CAN_ActivateNotification(&CanHandle, CAN_IT_RX_FIFO1_MSG_PENDING) != HAL_OK)
0000e4  2110              MOVS     r1,#0x10
0000e6  482b              LDR      r0,|L2.404|
0000e8  f7fffffe          BL       HAL_CAN_ActivateNotification
0000ec  b108              CBZ      r0,|L2.242|
;;;316      {
;;;317        /* Notification Error */
;;;318        Error_Handler();
0000ee  f7fffffe          BL       Error_Handler
                  |L2.242|
;;;319      }
;;;320    
;;;321      if (HAL_CAN_ActivateNotification(&CanHandle, CAN_IT_RX_FIFO1_FULL) != HAL_OK)
0000f2  2120              MOVS     r1,#0x20
0000f4  4827              LDR      r0,|L2.404|
0000f6  f7fffffe          BL       HAL_CAN_ActivateNotification
0000fa  b108              CBZ      r0,|L2.256|
;;;322      {
;;;323        /* Notification Error */
;;;324        Error_Handler();
0000fc  f7fffffe          BL       Error_Handler
                  |L2.256|
;;;325      }
;;;326    
;;;327      if (HAL_CAN_ActivateNotification(&CanHandle, CAN_IT_RX_FIFO1_OVERRUN) != HAL_OK)
000100  2140              MOVS     r1,#0x40
000102  4824              LDR      r0,|L2.404|
000104  f7fffffe          BL       HAL_CAN_ActivateNotification
000108  b108              CBZ      r0,|L2.270|
;;;328      {
;;;329        /* Notification Error */
;;;330        Error_Handler();
00010a  f7fffffe          BL       Error_Handler
                  |L2.270|
;;;331      }
;;;332    
;;;333      if (HAL_CAN_ActivateNotification(&CanHandle, CAN_IT_ERROR_WARNING) != HAL_OK)
00010e  f44f7180          MOV      r1,#0x100
000112  4820              LDR      r0,|L2.404|
000114  f7fffffe          BL       HAL_CAN_ActivateNotification
000118  b108              CBZ      r0,|L2.286|
;;;334      {
;;;335        /* Notification Error */
;;;336        Error_Handler();
00011a  f7fffffe          BL       Error_Handler
                  |L2.286|
;;;337      }
;;;338    
;;;339      if (HAL_CAN_ActivateNotification(&CanHandle, CAN_IT_ERROR_PASSIVE) != HAL_OK)
00011e  f44f7100          MOV      r1,#0x200
000122  481c              LDR      r0,|L2.404|
000124  f7fffffe          BL       HAL_CAN_ActivateNotification
000128  b108              CBZ      r0,|L2.302|
;;;340      {
;;;341        /* Notification Error */
;;;342        Error_Handler();
00012a  f7fffffe          BL       Error_Handler
                  |L2.302|
;;;343      }
;;;344    
;;;345      if (HAL_CAN_ActivateNotification(&CanHandle, CAN_IT_BUSOFF) != HAL_OK)
00012e  f44f6180          MOV      r1,#0x400
000132  4818              LDR      r0,|L2.404|
000134  f7fffffe          BL       HAL_CAN_ActivateNotification
000138  b108              CBZ      r0,|L2.318|
;;;346      {
;;;347        /* Notification Error */
;;;348        Error_Handler();
00013a  f7fffffe          BL       Error_Handler
                  |L2.318|
;;;349      }
;;;350    
;;;351      if (HAL_CAN_ActivateNotification(&CanHandle, CAN_IT_LAST_ERROR_CODE) != HAL_OK)
00013e  f44f6100          MOV      r1,#0x800
000142  4814              LDR      r0,|L2.404|
000144  f7fffffe          BL       HAL_CAN_ActivateNotification
000148  b108              CBZ      r0,|L2.334|
;;;352      {
;;;353        /* Notification Error */
;;;354        Error_Handler();
00014a  f7fffffe          BL       Error_Handler
                  |L2.334|
;;;355      }
;;;356    
;;;357      if (HAL_CAN_ActivateNotification(&CanHandle, CAN_IT_ERROR) != HAL_OK)
00014e  f44f4100          MOV      r1,#0x8000
000152  4810              LDR      r0,|L2.404|
000154  f7fffffe          BL       HAL_CAN_ActivateNotification
000158  b108              CBZ      r0,|L2.350|
;;;358      {
;;;359        /* Notification Error */
;;;360        Error_Handler();
00015a  f7fffffe          BL       Error_Handler
                  |L2.350|
;;;361      }
;;;362    
;;;363      /*##-5- Configure Transmission process #####################################*/
;;;364      TxHeader.StdId = 0x321;
00015e  f2403021          MOV      r0,#0x321
000162  490d              LDR      r1,|L2.408|
000164  6008              STR      r0,[r1,#0]  ; TxHeader
;;;365      TxHeader.ExtId = 0x01;
000166  2001              MOVS     r0,#1
000168  6048              STR      r0,[r1,#4]  ; TxHeader
;;;366      TxHeader.RTR = CAN_RTR_DATA;
00016a  2000              MOVS     r0,#0
00016c  60c8              STR      r0,[r1,#0xc]  ; TxHeader
;;;367      TxHeader.IDE = CAN_ID_STD;
00016e  6088              STR      r0,[r1,#8]  ; TxHeader
;;;368      TxHeader.DLC = 3;
000170  2003              MOVS     r0,#3
000172  6108              STR      r0,[r1,#0x10]  ; TxHeader
;;;369      TxHeader.TransmitGlobalTime = DISABLE;
000174  2000              MOVS     r0,#0
000176  7508              STRB     r0,[r1,#0x14]
;;;370    	TxData[0]=0xAA;
000178  20aa              MOVS     r0,#0xaa
00017a  4908              LDR      r1,|L2.412|
00017c  7008              STRB     r0,[r1,#0]
;;;371    	TxData[1]=0xBB;
00017e  20bb              MOVS     r0,#0xbb
000180  7048              STRB     r0,[r1,#1]
;;;372    	TxData[2]=0xCC;
000182  20cc              MOVS     r0,#0xcc
000184  7088              STRB     r0,[r1,#2]
;;;373    
;;;374    
;;;375    }
000186  b00b              ADD      sp,sp,#0x2c
000188  bd00              POP      {pc}
;;;376    
                          ENDP

00018a  0000              DCW      0x0000
                  |L2.396|
                          DCD      0x40023840
                  |L2.400|
                          DCD      0x40006400
                  |L2.404|
                          DCD      CanHandle
                  |L2.408|
                          DCD      TxHeader
                  |L2.412|
                          DCD      TxData

                          AREA ||i.CAN_ConfigureCallBackFct||, CODE, READONLY, ALIGN=2

                  CAN_ConfigureCallBackFct PROC
;;;181    
;;;182    void CAN_ConfigureCallBackFct(CAN_HandleTypeDef *hcan)
000000  b510              PUSH     {r4,lr}
;;;183    {
000002  4604              MOV      r4,r0
;;;184    //                               HAL_CAN_TX_MAILBOX0_COMPLETE_CB_ID Tx Mailbox 0 Complete callback ID
;;;185    //                               HAL_CAN_TX_MAILBOX1_COMPLETE_CB_ID Tx Mailbox 1 Complete callback ID
;;;186    //                               HAL_CAN_TX_MAILBOX2_COMPLETE_CB_ID Tx Mailbox 2 Complete callback ID
;;;187    //                               HAL_CAN_TX_MAILBOX0_ABORT_CB_ID Tx Mailbox 0 Abort callback ID
;;;188    //                               HAL_CAN_TX_MAILBOX1_ABORT_CB_ID Tx Mailbox 1 Abort callback ID
;;;189    //                               HAL_CAN_TX_MAILBOX2_ABORT_CB_ID Tx Mailbox 2 Abort callback ID
;;;190    //                               HAL_CAN_RX_FIFO0_MSG_PENDING_CB_ID Rx Fifo 0 message pending callback ID
;;;191    	HAL_CAN_RegisterCallback(hcan, HAL_CAN_RX_FIFO0_MSG_PENDING_CB_ID, IRQ_CAN_RxFifo0MsgPendingCallback);
000004  4a11              LDR      r2,|L3.76|
000006  2106              MOVS     r1,#6
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       HAL_CAN_RegisterCallback
;;;192    //                               HAL_CAN_RX_FIFO0_FULL_CB_ID Rx Fifo 0 full callback ID
;;;193    	HAL_CAN_RegisterCallback(hcan, HAL_CAN_RX_FIFO0_FULL_CB_ID, assert_print);
00000e  4a10              LDR      r2,|L3.80|
000010  2107              MOVS     r1,#7
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       HAL_CAN_RegisterCallback
;;;194    //                               HAL_CAN_RX_FIFO1_MSG_PENDING_CB_ID Rx Fifo 1 message pending callback ID
;;;195    	HAL_CAN_RegisterCallback(hcan, HAL_CAN_RX_FIFO1_MSG_PENDING_CB_ID, IRQ_CAN_RxFifo1MsgPendingCallback);
000018  4a0e              LDR      r2,|L3.84|
00001a  2108              MOVS     r1,#8
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       HAL_CAN_RegisterCallback
;;;196    //                               HAL_CAN_RX_FIFO1_FULL_CB_ID Rx Fifo 1 full callback ID
;;;197    	HAL_CAN_RegisterCallback(hcan, HAL_CAN_RX_FIFO1_FULL_CB_ID, assert_print);
000022  4a0b              LDR      r2,|L3.80|
000024  2109              MOVS     r1,#9
000026  4620              MOV      r0,r4
000028  f7fffffe          BL       HAL_CAN_RegisterCallback
;;;198    //                               HAL_CAN_SLEEP_CB_ID Sleep callback ID
;;;199    	HAL_CAN_RegisterCallback(hcan, HAL_CAN_SLEEP_CB_ID, print_info);
00002c  4a0a              LDR      r2,|L3.88|
00002e  210a              MOVS     r1,#0xa
000030  4620              MOV      r0,r4
000032  f7fffffe          BL       HAL_CAN_RegisterCallback
;;;200    //                               HAL_CAN_WAKEUP_FROM_RX_MSG_CB_ID Wake Up from Rx message callback ID
;;;201    	HAL_CAN_RegisterCallback(hcan, HAL_CAN_SLEEP_CB_ID, print_info_WAKEUP_FROM_RX_MSG);
000036  4a09              LDR      r2,|L3.92|
000038  210a              MOVS     r1,#0xa
00003a  4620              MOV      r0,r4
00003c  f7fffffe          BL       HAL_CAN_RegisterCallback
;;;202    //                               HAL_CAN_ERROR_CB_ID Error callback ID
;;;203    	HAL_CAN_RegisterCallback(hcan, HAL_CAN_ERROR_CB_ID, assert_print);
000040  4a03              LDR      r2,|L3.80|
000042  210c              MOVS     r1,#0xc
000044  4620              MOV      r0,r4
000046  f7fffffe          BL       HAL_CAN_RegisterCallback
;;;204    //                               HAL_CAN_MSPINIT_CB_ID MspInit callback ID
;;;205    //                               HAL_CAN_MSPDEINIT_CB_ID MspDeInit callback ID	
;;;206    	
;;;207    }
00004a  bd10              POP      {r4,pc}
;;;208    
                          ENDP

                  |L3.76|
                          DCD      IRQ_CAN_RxFifo0MsgPendingCallback
                  |L3.80|
                          DCD      assert_print
                  |L3.84|
                          DCD      IRQ_CAN_RxFifo1MsgPendingCallback
                  |L3.88|
                          DCD      print_info
                  |L3.92|
                          DCD      print_info_WAKEUP_FROM_RX_MSG

                          AREA ||i.CAN_NVIC_Init||, CODE, READONLY, ALIGN=2

                  CAN_NVIC_Init PROC
;;;104      */
;;;105    void CAN_NVIC_Init(void)
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;106    {
;;;107    	  uint32_t prioritygroup = 0x00U;
000004  2000              MOVS     r0,#0
;;;108      
;;;109      /* Check the parameters */
;;;110    // assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
;;;111    //  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
;;;112      
;;;113      prioritygroup = NVIC_GetPriorityGrouping();
000006  bf00              NOP      
000008  492c              LDR      r1,|L4.188|
00000a  6809              LDR      r1,[r1,#0]
00000c  f3c12102          UBFX     r1,r1,#8,#3
000010  4608              MOV      r0,r1
;;;114      
;;;115      //NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
;;;116      NVIC_SetPriority(CANx_RX_IRQn, NVIC_EncodePriority(prioritygroup, 1, 0));
000012  2114              MOVS     r1,#0x14
000014  4603              MOV      r3,r0
000016  2501              MOVS     r5,#1
000018  2600              MOVS     r6,#0
00001a  461c              MOV      r4,r3
00001c  f1c40807          RSB      r8,r4,#7
000020  f1b80f04          CMP      r8,#4
000024  d902              BLS      |L4.44|
000026  f04f0804          MOV      r8,#4
00002a  e001              B        |L4.48|
                  |L4.44|
00002c  f1c40807          RSB      r8,r4,#7
                  |L4.48|
000030  46c4              MOV      r12,r8
000032  f1040804          ADD      r8,r4,#4
000036  f1b80f07          CMP      r8,#7
00003a  d202              BCS      |L4.66|
00003c  f04f0800          MOV      r8,#0
000040  e001              B        |L4.70|
                  |L4.66|
000042  f1a40803          SUB      r8,r4,#3
                  |L4.70|
000046  4647              MOV      r7,r8
000048  f04f0801          MOV      r8,#1
00004c  fa08f80c          LSL      r8,r8,r12
000050  f1a80801          SUB      r8,r8,#1
000054  ea080805          AND      r8,r8,r5
000058  fa08f807          LSL      r8,r8,r7
00005c  f04f0901          MOV      r9,#1
000060  fa09f907          LSL      r9,r9,r7
000064  f1a90901          SUB      r9,r9,#1
000068  ea090906          AND      r9,r9,r6
00006c  ea480209          ORR      r2,r8,r9
000070  bf00              NOP      
000072  2900              CMP      r1,#0
000074  db04              BLT      |L4.128|
000076  0713              LSLS     r3,r2,#28
000078  0e1c              LSRS     r4,r3,#24
00007a  4b11              LDR      r3,|L4.192|
00007c  545c              STRB     r4,[r3,r1]
00007e  e007              B        |L4.144|
                  |L4.128|
000080  0713              LSLS     r3,r2,#28
000082  0e1d              LSRS     r5,r3,#24
000084  4b0d              LDR      r3,|L4.188|
000086  330c              ADDS     r3,r3,#0xc
000088  f001040f          AND      r4,r1,#0xf
00008c  1f24              SUBS     r4,r4,#4
00008e  551d              STRB     r5,[r3,r4]
                  |L4.144|
000090  bf00              NOP      
;;;117    
;;;118    	  /* Enable interrupt */
;;;119      NVIC_EnableIRQ(CANx_RX_IRQn);
000092  2114              MOVS     r1,#0x14
000094  2900              CMP      r1,#0
000096  db0d              BLT      |L4.180|
000098  bf00              NOP      
00009a  bf00              NOP      
00009c  f001031f          AND      r3,r1,#0x1f
0000a0  2201              MOVS     r2,#1
0000a2  409a              LSLS     r2,r2,r3
0000a4  094b              LSRS     r3,r1,#5
0000a6  009b              LSLS     r3,r3,#2
0000a8  f10323e0          ADD      r3,r3,#0xe000e000
0000ac  f8c32100          STR      r2,[r3,#0x100]
0000b0  bf00              NOP      
0000b2  bf00              NOP      
                  |L4.180|
0000b4  bf00              NOP      
;;;120    }
0000b6  e8bd83f0          POP      {r4-r9,pc}
;;;121    
                          ENDP

0000ba  0000              DCW      0x0000
                  |L4.188|
                          DCD      0xe000ed0c
                  |L4.192|
                          DCD      0xe000e400

                          AREA ||i.Error_Handler||, CODE, READONLY, ALIGN=2

                  Error_Handler PROC
;;;88     
;;;89     static void Error_Handler(void)
000000  b510              PUSH     {r4,lr}
;;;90     {
;;;91     		printf("ERROR");
000002  a002              ADR      r0,|L5.12|
000004  f7fffffe          BL       __2printf
;;;92     
;;;93     }
000008  bd10              POP      {r4,pc}
;;;94     
                          ENDP

00000a  0000              DCW      0x0000
                  |L5.12|
00000c  4552524f          DCB      "ERROR",0
000010  5200    
000012  00                DCB      0
000013  00                DCB      0

                          AREA ||i.IRQ_CAN_RxFifo0MsgPendingCallback||, CODE, READONLY, ALIGN=2

                  IRQ_CAN_RxFifo0MsgPendingCallback PROC
;;;127      */
;;;128    void IRQ_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
000000  b510              PUSH     {r4,lr}
;;;129    {
000002  4604              MOV      r4,r0
;;;130      /* Get RX message */
;;;131      if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
000004  4b08              LDR      r3,|L6.40|
000006  4a09              LDR      r2,|L6.44|
000008  2100              MOVS     r1,#0
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       HAL_CAN_GetRxMessage
000010  b108              CBZ      r0,|L6.22|
;;;132      {
;;;133        /* Reception Error */
;;;134        Error_Handler();
000012  f7fffffe          BL       Error_Handler
                  |L6.22|
;;;135      }
;;;136    	CountReceivedFifo0++;
000016  4806              LDR      r0,|L6.48|
000018  8800              LDRH     r0,[r0,#0]  ; CountReceivedFifo0
00001a  1c40              ADDS     r0,r0,#1
00001c  4904              LDR      r1,|L6.48|
00001e  8008              STRH     r0,[r1,#0]
;;;137    
;;;138    //	printf("Msg Received \n");
;;;139    	flagReceived=1;
000020  2001              MOVS     r0,#1
000022  4904              LDR      r1,|L6.52|
000024  7008              STRB     r0,[r1,#0]
;;;140    
;;;141    }
000026  bd10              POP      {r4,pc}
;;;142    
                          ENDP

                  |L6.40|
                          DCD      RxData
                  |L6.44|
                          DCD      RxHeader
                  |L6.48|
                          DCD      CountReceivedFifo0
                  |L6.52|
                          DCD      flagReceived

                          AREA ||i.IRQ_CAN_RxFifo1MsgPendingCallback||, CODE, READONLY, ALIGN=2

                  IRQ_CAN_RxFifo1MsgPendingCallback PROC
;;;148      */
;;;149    void IRQ_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
000000  b510              PUSH     {r4,lr}
;;;150    {
000002  4604              MOV      r4,r0
;;;151      /* Get RX message */
;;;152      if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &RxHeader, RxData) != HAL_OK)
000004  4b08              LDR      r3,|L7.40|
000006  4a09              LDR      r2,|L7.44|
000008  2101              MOVS     r1,#1
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       HAL_CAN_GetRxMessage
000010  b108              CBZ      r0,|L7.22|
;;;153      {
;;;154        /* Reception Error */
;;;155        Error_Handler();
000012  f7fffffe          BL       Error_Handler
                  |L7.22|
;;;156      }
;;;157    	CountReceivedFifo1++;
000016  4806              LDR      r0,|L7.48|
000018  8800              LDRH     r0,[r0,#0]  ; CountReceivedFifo1
00001a  1c40              ADDS     r0,r0,#1
00001c  4904              LDR      r1,|L7.48|
00001e  8008              STRH     r0,[r1,#0]
;;;158    
;;;159    //	printf("Msg Received \n");
;;;160    	flagReceived=1;
000020  2001              MOVS     r0,#1
000022  4904              LDR      r1,|L7.52|
000024  7008              STRB     r0,[r1,#0]
;;;161    
;;;162    }
000026  bd10              POP      {r4,pc}
;;;163    
                          ENDP

                  |L7.40|
                          DCD      RxData
                  |L7.44|
                          DCD      RxHeader
                  |L7.48|
                          DCD      CountReceivedFifo1
                  |L7.52|
                          DCD      flagReceived

                          AREA ||i.assert_failed||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                  assert_failed PROC
;;;82      *----------------------------------------------------------------------------*/
;;;83     void assert_failed(uint8_t* file, uint32_t line) {
000000  4604              MOV      r4,r0
000002  460d              MOV      r5,r1
;;;84           printf("Assert fail at File %s Line %d", file, (int)line);
000004  462a              MOV      r2,r5
000006  4621              MOV      r1,r4
000008  a002              ADR      r0,|L8.20|
00000a  f7fffffe          BL       __2printf
;;;85           while(1);   // hang here (behavior is our your choice)
00000e  bf00              NOP      
                  |L8.16|
000010  e7fe              B        |L8.16|
;;;86     } 
;;;87     
                          ENDP

000012  0000              DCW      0x0000
                  |L8.20|
000014  41737365          DCB      "Assert fail at File %s Line %d",0
000018  72742066
00001c  61696c20
000020  61742046
000024  696c6520
000028  2573204c
00002c  696e6520
000030  256400  
000033  00                DCB      0

                          AREA ||i.assert_print||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  assert_print PROC
;;;164    
;;;165    void assert_print(CAN_HandleTypeDef *_hcan) {
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
;;;166          printf("ErrorCode hcan %d",  (int)_hcan->ErrorCode);
000004  6a61              LDR      r1,[r4,#0x24]
000006  a002              ADR      r0,|L9.16|
000008  f7fffffe          BL       __2printf
;;;167    
;;;168    }
00000c  bd10              POP      {r4,pc}
;;;169    
                          ENDP

00000e  0000              DCW      0x0000
                  |L9.16|
000010  4572726f          DCB      "ErrorCode hcan %d",0
000014  72436f64
000018  65206863
00001c  616e2025
000020  6400    
000022  00                DCB      0
000023  00                DCB      0

                          AREA ||i.main||, CODE, READONLY, ALIGN=2

                  main PROC
;;;383    
;;;384    int main(void){
000000  f7fffffe          BL       System_Clock_Init
;;;385    // Switch System Clock to maximum
;;;386    // F446 : 180Mhz, Apb1TimerClock = 90Mhz Apb2TimerClock = 180Mhz
;;;387    // Apb1PeriphClock = 45Mhz Apb2PeriphClock = 90Mhz
;;;388    	System_Clock_Init(); 
;;;389    
;;;390    	SysTick_Initialize(1000);  // Interrupt period  = 1ms (1/1khz)
000004  f44f707a          MOV      r0,#0x3e8
000008  f7fffffe          BL       SysTick_Initialize
;;;391    
;;;392    	  /* Configure the CAN peripheral */
;;;393    	CAN_Config();
00000c  f7fffffe          BL       CAN_Config
;;;394    
;;;395    	CAN_NVIC_Init();
000010  f7fffffe          BL       CAN_NVIC_Init
;;;396    		
;;;397    	/* Start the Transmission process */
;;;398    	if (HAL_CAN_AddTxMessage(&CanHandle, &TxHeader, TxData, &TxMailbox) != HAL_OK)
000014  4b12              LDR      r3,|L10.96|
000016  4a13              LDR      r2,|L10.100|
000018  4913              LDR      r1,|L10.104|
00001a  4814              LDR      r0,|L10.108|
00001c  f7fffffe          BL       HAL_CAN_AddTxMessage
000020  b108              CBZ      r0,|L10.38|
;;;399    	{
;;;400    		/* Transmission request Error */
;;;401    		Error_Handler();
000022  f7fffffe          BL       Error_Handler
                  |L10.38|
;;;402    	}
;;;403    	printf("Welcome STM32 Domocan Project\n");
000026  a012              ADR      r0,|L10.112|
000028  f7fffffe          BL       __2printf
;;;404    
;;;405    	while(1)
00002c  e016              B        |L10.92|
                  |L10.46|
;;;406    	{
;;;407    		Delay_ms(100);
00002e  2064              MOVS     r0,#0x64
000030  f7fffffe          BL       Delay_ms
;;;408    
;;;409    		if (flagReceived)
000034  4816              LDR      r0,|L10.144|
000036  7800              LDRB     r0,[r0,#0]  ; flagReceived
000038  b180              CBZ      r0,|L10.92|
;;;410    		{
;;;411    			flagReceived=0;
00003a  2000              MOVS     r0,#0
00003c  4914              LDR      r1,|L10.144|
00003e  7008              STRB     r0,[r1,#0]
;;;412    			/* Start the Transmission process */
;;;413    			if (HAL_CAN_AddTxMessage(&CanHandle, &TxHeader, TxData, &TxMailbox) != HAL_OK)
000040  4b07              LDR      r3,|L10.96|
000042  4a08              LDR      r2,|L10.100|
000044  4908              LDR      r1,|L10.104|
000046  4809              LDR      r0,|L10.108|
000048  f7fffffe          BL       HAL_CAN_AddTxMessage
00004c  b108              CBZ      r0,|L10.82|
;;;414    			{
;;;415    				/* Transmission request Error */
;;;416    				Error_Handler();
00004e  f7fffffe          BL       Error_Handler
                  |L10.82|
;;;417    			}
;;;418    			CountTransmit++;
000052  4810              LDR      r0,|L10.148|
000054  8800              LDRH     r0,[r0,#0]  ; CountTransmit
000056  1c40              ADDS     r0,r0,#1
000058  490e              LDR      r1,|L10.148|
00005a  8008              STRH     r0,[r1,#0]
                  |L10.92|
00005c  e7e7              B        |L10.46|
;;;419    			// Erroe Passive !!! LBR HAL_CAN_RequestSleep(&CanHandle);
;;;420    
;;;421    		}
;;;422    	}
;;;423    }
;;;424    
                          ENDP

00005e  0000              DCW      0x0000
                  |L10.96|
                          DCD      TxMailbox
                  |L10.100|
                          DCD      TxData
                  |L10.104|
                          DCD      TxHeader
                  |L10.108|
                          DCD      CanHandle
                  |L10.112|
000070  57656c63          DCB      "Welcome STM32 Domocan Project\n",0
000074  6f6d6520
000078  53544d33
00007c  3220446f
000080  6d6f6361
000084  6e205072
000088  6f6a6563
00008c  740a00  
00008f  00                DCB      0
                  |L10.144|
                          DCD      flagReceived
                  |L10.148|
                          DCD      CountTransmit

                          AREA ||i.print_info||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  print_info PROC
;;;169    
;;;170    void print_info(CAN_HandleTypeDef *_hcan) {
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
;;;171          printf("CAN Entered in SLEEP %d",  (int)_hcan->ErrorCode);
000004  6a61              LDR      r1,[r4,#0x24]
000006  a002              ADR      r0,|L11.16|
000008  f7fffffe          BL       __2printf
;;;172    
;;;173    }
00000c  bd10              POP      {r4,pc}
;;;174    
                          ENDP

00000e  0000              DCW      0x0000
                  |L11.16|
000010  43414e20          DCB      "CAN Entered in SLEEP %d",0
000014  456e7465
000018  72656420
00001c  696e2053
000020  4c454550
000024  20256400

                          AREA ||i.print_info_WAKEUP_FROM_RX_MSG||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  print_info_WAKEUP_FROM_RX_MSG PROC
;;;174    
;;;175    void print_info_WAKEUP_FROM_RX_MSG(CAN_HandleTypeDef *_hcan) {
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
;;;176          printf("CAN Entered is HAL_CAN_WAKEUP_FROM_RX_MSG_CB_ID %d",  (int)_hcan->ErrorCode);
000004  6a61              LDR      r1,[r4,#0x24]
000006  a002              ADR      r0,|L12.16|
000008  f7fffffe          BL       __2printf
;;;177    
;;;178    }
00000c  bd10              POP      {r4,pc}
;;;179    
                          ENDP

00000e  0000              DCW      0x0000
                  |L12.16|
000010  43414e20          DCB      "CAN Entered is HAL_CAN_WAKEUP_FROM_RX_MSG_CB_ID %d",0
000014  456e7465
000018  72656420
00001c  69732048
000020  414c5f43
000024  414e5f57
000028  414b4555
00002c  505f4652
000030  4f4d5f52
000034  585f4d53
000038  475f4342
00003c  5f494420
000040  256400  
000043  00                DCB      0

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  CanHandle
                          %        100
                  TxHeader
                          %        24
                  RxHeader
                          %        28

                          AREA ||.data||, DATA, ALIGN=2

                  flagReceived
000000  00                DCB      0x00
                  ubKeyNumber
000001  00                DCB      0x00
                  TxData
000002  0000              DCB      0x00,0x00
                          DCD      0x00000000
000008  0000              DCB      0x00,0x00
                  RxData
00000a  0000              DCB      0x00,0x00
                          DCD      0x00000000
000010  00000000          DCB      0x00,0x00,0x00,0x00
                  TxMailbox
                          DCD      0x00000000
                  CountTransmit
000018  0000              DCW      0x0000
                  CountReceivedFifo0
00001a  0000              DCW      0x0000
                  CountReceivedFifo1
00001c  0000              DCW      0x0000

;*** Start embedded assembler ***

#line 1 "Src\\main.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_b56b0ca3____REV16|
#line 492 "D:\\Users\\Laurent\\AppData\\Local\\Arm\\Packs\\ARM\\CMSIS\\5.6.0\\CMSIS\\Core\\Include\\cmsis_armcc.h"
|__asm___6_main_c_b56b0ca3____REV16| PROC
#line 493

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_b56b0ca3____REVSH|
#line 507
|__asm___6_main_c_b56b0ca3____REVSH| PROC
#line 508

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_b56b0ca3____RRX|
#line 694
|__asm___6_main_c_b56b0ca3____RRX| PROC
#line 695

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
